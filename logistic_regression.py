# -*- coding: utf-8 -*-
"""Logistic Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pH4Rhqp5uNrF5xT3Zd9q4_QdxIbwGbg_
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd 
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline







from sklearn.linear_model import LogisticRegression

data = pd.read_csv('/content/tested.csv')
data.head(10)

data.describe()

data.isnull().sum()

data.count().sum()

sns.heatmap(data.isnull(), cbar = False, cmap = 'viridis')
plt.title('Number of people in the ship with respect their features ')
plt.show()

data['Age'].isnull().sum()/data.shape[0]*100

data['Cabin'].isnull().sum()/data.shape[0]*100

ax = data['Age'].hist(bins = 30, density = True, stacked = True, color = 'red', alpha = 0.7, figsize = (16, 5))
data['Age'].plot(kind = 'density', color = 'red')
ax.set_xlabel('Age')
plt.title('Percentage of the people with respect to their age ')
plt.show()

Survived = 'Survived'
not_survived = 'not survived'

fig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (20, 4))
women =data[data['Sex'] == 'female']
men =data[data['Sex'] == 'male']

ax = sns.distplot(women[women[Survived]==1].Age.dropna(), bins = 18, label = Survived, ax = axes[0], kde = False)
ax = sns.distplot(women[women[Survived]==0].Age.dropna(), bins = 40, label = not_survived, ax = axes[0], kde = False)
ax.legend()
ax.set_title('female ')
ax = sns.distplot(men[men[Survived]==1].Age.dropna(), bins = 18, label = Survived, ax = axes[1], kde = False)
ax = sns.distplot(men[men[Survived]==0].Age.dropna(), bins = 40, label = not_survived, ax = axes[1], kde = False)
ax.legend()
ax.set_title('male')
plt.ylabel('No. of people')
plt.show()

data['Sex'].value_counts()

sns.catplot(x = data.Pclass, y = 'Age', data = data, kind = 'box')
plt.title('Age of the people who are in pclass')
plt.show()

sns.catplot(x = 'Pclass', y = 'Fare', data = data, kind = 'box')

data[data['Pclass'] == 1]['Age'].mean()

data[data['Pclass'] == 2]['Age'].mean()

data[data['Pclass'] == 3]['Age'].mean()

def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]
    
    if pd.isnull(Age):
        if Pclass == 1:
            return data[data['Pclass'] == 1]['Age'].mean()
        elif Pclass == 2:
            return data[data['Pclass'] == 2]['Age'].mean()
        elif Pclass == 3:
            return data[data['Pclass'] == 3]['Age'].mean()
        
    else:
        return Age

data['Age'] = data[['Age', 'Pclass']].apply(impute_age, axis = 1)

sns.heatmap(data.isnull(), cbar = False, cmap = 'viridis')

data.drop((f"{labels[mask]} =['Cabin', 'Embarked','Fare'], inplace = True, Axis =1))

f = sns.FacetGrid(data, row = 'Embarked', height = 2.5, aspect= 3)
f.map(sns.pointplot, 'Pclass', 'Survived', 'Sex', order = None, hue_order = None)
f.add_legend()
plt.show()

data['Embarked'].isnull().sum()

data['Embarked'].value_counts()

common_value = 'S'
data['Embarked'].fillna(common_value, inplace = True) data['Embarked'].isnull().sum()

sns.heatmap(titanic.isnull(), cbar = False, cmap = 'viridis')
plt.title('Number of people with respect to their features')
plt.show()

titanic.drop(labels=['deck', 'embark_town', 'alive'], inplace = True, axis = 1)

sns.heatmap(titanic.isnull(), cbar = False, cmap = 'viridis')
plt.title('Number of people with respect to their features')
plt.show()

titanic.info()

titanic['fare'] = titanic['fare'].astype('int')
titanic['age'] = titanic['age'].astype('int')
titanic['pclass'] = titanic['pclass'].astype('int')
titanic.info()

genders = {'male': 0, 'female': 1}
titanic['sex'] = titanic['sex'].map(genders)
who = {'man': 0, 'women': 1, 'child': 2}
titanic['who'] = titanic['who'].map(who)
adult_male = {True: 1, False: 0}
titanic['adult_male'] = titanic['adult_male'].map(adult_male)
alone = {True: 1, False: 0}
titanic['alone'] = titanic['alone'].map(alone)            ports = {'S': 0, 'C': 1, 'Q': 2}
titanic['embarked'] = titanic['embarked'].map(ports)  titanic.head()

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

X = titanic.drop('survived', axis = 1)
y = titanic['survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)                           model = LogisticRegression(solver= 'lbfgs', max_iter = 400)
model.fit(X_train, y_train)
y_predict = model.predict(X_test)
model.score(X_test, y_test)



from sklearn.model_selection import train_test_split
from skleran.model_selection import train_test_split

